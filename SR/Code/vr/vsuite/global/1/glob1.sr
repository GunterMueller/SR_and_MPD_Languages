global Shared
	type primary_color = int
	const red := 1, blue := 2, green := 3
	var color : primary_color := red  # global var with initialisation
	var colorname[1:3] : string [5]   # global var-initialisation done in
					  # global body; used by A and B
	const PI := 3.141592654
	op sema() 		# implemented by resource A; invoked by B
	op semb()  		# implemented by resouce B; invoked by A
	op semnodelay() 	# implemented by A and B; invoked by "Shared"
	op sendprint(s : string[*]) {send} # implemented by "Shared" by "in"
				           # invoked by A and B
	op callprint(s : string[*]) {call} # implemented by "Shared" by "proc"
				           # invoked by A and B
	var i := 1

body Shared
	var callheader, sendheader, resourcename : string[20]  #local to Shared
	colorname[1] := "red"; colorname[2] := "blue"; colorname[3] := "green"

	callheader := "callprint@Shared : "

	process Sharedprint
		write("Sharedprint started")
		send semnodelay(); send semnodelay()
		do true->
			sendheader := "sendprint@Shared : "
			receive sendprint(resourcename)
			write(sendheader, colorname[color],
				"This sendprint mesg was from ", resourcename)
			if resourcename = " B" -> exit fi
		od
	end Sharedprint

	proc callprint(resourcename)
		write(callheader, colorname[color],
			"This callprint was called by ", resourcename)
	end
end Shared

resource A
	import Shared
	const TWOPI := 2 * PI
	const anotherTWOPI := 2 * Shared.PI  	# once caused complr malfunction

body A()
 process a
	var prevcolor : primary_color
	# shouldn't alter the  "callheader" in Shared's body
	var callheader : string[20] := "SCOPE ERROR"
	write("A: 2*PI is ", TWOPI)
	write("A: another 2*PI is ", anotherTWOPI)

	receive semnodelay()

	prevcolor := color
	color := blue
	write("A: the color was ", colorname[prevcolor])
	write("A: the color now is ", colorname[color])
	Shared.color := green
	write("A: the color now is ", colorname[color])
	call callprint(" A")
	send Shared.sendprint(" A")

	send semb()

 end a
end A


resource B
	import A, Shared
	const THREEPI := 3 * PI

body B ()
 process b
	var prevcolor : primary_color

	write("B: 3*PI is ", THREEPI)
	create A()

	receive semnodelay()

	write("B: before receive semb()")
	receive semb()
	prevcolor := color
	color := red
	write("B: the color was ", colorname[prevcolor])
	call callprint(" B")
	send sendprint(" B")

 end b
end B
