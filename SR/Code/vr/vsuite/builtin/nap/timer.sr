#  test timer functions
#
#  usage:
#	a.out
#	a.out maxerror
#	a.out maxearly maxlate
#
#  MAXEARLY and MAXLATE controls how much earlier or later (in milliseconds)
#  we'll accept a nap as being correct.  Larger differences aren't NECESSARILY
#  wrong, but they're suspicious.

resource timer ()
    var MAXEARLY := 20		# allow up to 1/50 sec early
    var MAXLATE := 1000		# allow up to 1 sec late
    external time (p : ptr int) returns t : int
    op tnap (msec : int)
    op oops (msg : string[*]; msec : int; a1 : int; a2 : int)

    var t1, t2, a1, a2 : int

    if numargs() = 1 -> getarg(1,MAXEARLY); getarg(1,MAXLATE) fi
    if numargs() = 2 -> getarg(1,MAXEARLY); getarg(2,MAXLATE) fi

    write("maximum eagerness:", MAXEARLY, "msec early")
    write("maximum tardiness:", MAXLATE, "msec late")

    write("begin timing test")
    t1 := time(null)
    a1 := age()

    tnap(-479652)
    tnap(0)
    tnap(1)
    tnap(2)
    tnap(5)
    tnap(10)
    tnap(22)
    tnap(47)
    tnap(100)
    tnap(220)
    tnap(470)
    tnap(1000)
    tnap(2200)
    tnap(4700)
    tnap(12000)
    tnap(0)
    tnap(1)
    tnap(2)
    tnap(5)
    tnap(10)
    tnap(22)
    tnap(47)
    tnap(100)
    tnap(220)
    tnap(470)
    tnap(1000)
    tnap(0)
    tnap(0)
    tnap(0)
    tnap(0)
    tnap(0)
    tnap(1)
    tnap(1)
    tnap(1)
    tnap(1)
    tnap(1)
    tnap(1234)

    write("checking overall times")
    t2 := time(null)
    a2 := age()
    if abs((a2-a1)/1000 - (t2-t1)) > 1 + (MAXLATE + MAXEARLY) / 1000 ->
	writes("  *possible* overall timer problem:")
	writes("  Unix t1=",t1,", t2=",t2,", difference=",t2-t1," seconds\n")
	writes("  SR a1=",a1,", a2=",a2,", difference=",a2-a1," msec\n")
	fi

#  verify that active processes don't prevent a napping process from waking

    sem s, t
    process p  do true -> P(s); V(t)  od end
    process q  do true -> P(t); V(s)  od end

    write ("checking starvation")
    V(t)			# start the processes
    write ("   napping")
    nap (5000)			# nap
    write ("   awakened")
    write("end timing test")
    stop


proc tnap (msec)	# test a nap of n msec
    var a1, a2, delta: int
    writes("nap(",msec,"):\n")
    a1 := age()
    nap(msec)
    a2 := age()
    delta := a2 - a1
    if msec < 0 ->
	msec := 0	# nap() treats it as zero; so will we
	fi
    if delta < 0 ->
	oops("time went backwards",msec,a1,a2)
    [] delta < msec - MAXEARLY ->
	oops("insufficient nap",msec,a1,a2)
    [] delta > msec + MAXLATE ->
	oops("excessive nap",msec,a1,a2)
    fi
end tnap



proc oops (msg, msec, a1, a2)
    var actual := a2 - a1
    var offby := actual - msec
    writes("    error: ",msg,"  (wanted ",msec," msec;  got ",actual,
	";  off by ",offby,")\n")
end oops



end timer
