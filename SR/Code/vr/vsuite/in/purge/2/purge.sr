resource purge()
   # first some globals for laziness
   var g1, g2: cap (x:int)
   op go() {send} # make it a sem
   op r(x:int);  op s(x:int)
   process sigh
      receive go()
      send r(3)
      send g1(-123)
      send r(4)
      send r(5)
      send g2(99)
      send s(101)
      receive go()
      send s(102)
      send s(103)
      send s(104)
      in r(x) and x = 4 -> write("r",x) ni
      do ?r + ?s > 0 ->
	   in r(x) -> write("r",x)
	   [] s(x) -> write("s",x)
	   ni
      od
   end
   process ugh
      # first, some simple tests with k invocations to be purged
      fa k := 0 to 3 ->
	   op f(x:int)
	   fa i := 1 to k -> send f(-i)  af
	   in f(x) and x = 12345 /* never true */ -> write("oops",k)
	   [] else -> write("ok",k,?f)
	   ni
      af
      op f1(x:int); op f2(x:int)
      g1 := f1; g2 := f2
      send go()
      in f1(x) and x = 12345 -> write("f1 can't happen", x)
      [] f2(x) -> write("f2", x)
      [] r(x) and x = 12345 -> write("r can't happen", x)
      ni
      send go()
   end
end

