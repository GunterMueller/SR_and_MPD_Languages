#  Build a binary tree of processes by reading input, then send down
#  a message when ready to read the data back out.

#  Originally written by Mike Coffin (see below), who found a bug in
#  in input termination after a reply.  Along the way a problem with
#  record construction was also uncovered.  Later we discovered that
#  this is perhaps the only vsuite test that reads input from multiple
#  SR processes (it found a MultiSR bug doing this).


#  Date: Fri, 1 Nov 91
#  From: Michael Coffin 
#
#  ...I have a program that works correctly when an operation is sent to.
#  But when I try a simple transformation: call the operation and have the
#  operation immediately execute "reply" ... I get deadlock or core dumps.



# resource bsort reads integers from stdin until EOF is read,
# sorts them, and prints them out.

# It does so by creating a binary tree of processes.
# Each process has a pivot value and a left and right subtree that
# are each a process.  Values less than the pivot are passed down to
# the left; values greater are passed to the right.  Printing is done
# in the obvious way: first print the values in the left subtree, then
# the pivot, and then the right subtree.

resource bsort()
   type pair = rec(store: cap(x: int); sendup: cap(z: cap (x: int)))
   op sorter(x: int) returns p: pair
   op quit()

   process main
      var root: pair
      var v: int

      read(v)
      root := sorter(v)		# create a sort tree

      do read(v) > 0 ->
	  root.store(v)		# store number in sort tree
      od

      op get(x: int)                # make a place to receive results

      root.sendup(get)              # ...and send it to sorter,

      do true ->
	   in get(i) ->  write(i)   # ...and then use it
	   [] quit() ->  exit       # quit only on deadlock
	   ni
      od
      write("loop finished")
   end

   proc sorter(pivot) returns myops
      op store(x: int)           # operation to accept ints from above
      op sendup(c: cap (x: int))  # accept a place to send ints up
      op get(x: int)             # place to accept ints from below

      var lcnt := 0              # number in left subtree
      var rcnt := 0              #   "    in right   "
      var l,r: pair              # pairs representing subtrees

      myops := pair (store, sendup)	# build my pair and return it
      reply

      # execute server loop
      do true ->
	   in store(i) ->
		if i < pivot ->
		     if lcnt = 0 -> l := sorter(i)
		     [] else -> l.store(i)
		     fi
		     lcnt++
		[] i >= pivot ->
		     if rcnt = 0 -> r := sorter(i)
		     [] else -> r.store(i)
		     fi
		     rcnt++
		fi
	   [] sendup(ret) ->
		reply

		# generate values
		if lcnt > 0 ->
		     l.sendup(get)

		     do lcnt > 0 ->
			  in get(i) ->
			       ret(i); lcnt--;
			  ni
		     od
		fi
		ret(pivot)

		if rcnt > 0 ->
		     r.sendup(get)

		     do rcnt > 0 ->
			  in get(i) ->
			       ret(i); rcnt--;
			  ni
		     od
		fi
		exit
	   ni
      od
   end

   final quit() end
end bsort
